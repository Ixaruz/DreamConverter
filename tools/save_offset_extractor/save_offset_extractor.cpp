#include "smmh_paths_by_revision.hpp"

#include <savefile/revision_checker.hpp>
#include <util/util.hpp>

#include <ACNHByaml.hpp>
#include <MurmurHash3.hpp>

#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <map>
#include <filesystem>

using namespace std;
namespace fs = std::filesystem;
using namespace MurmurHash3;

// smmh_path is the path where the "Smmh" folder resides in
ACNHByaml *get_byaml(fs::path smmh_path, revision_checker::file_header_info fhi) {
    fs::path smmh_byaml_file_path(smmh_path / smmh_paths_by_revision::game(fhi));
    ifstream byaml_file;

    byaml_file.open(smmh_byaml_file_path, ios::in | ios::binary);
    u8 *byaml_buffer = new u8[fs::file_size(smmh_byaml_file_path)];
    util::read_data(byaml_file, 0, byaml_buffer, fs::file_size(smmh_byaml_file_path));
    byaml_file.close();

    return new ACNHByaml(byaml_buffer, fs::file_size(smmh_byaml_file_path));
}

struct MetaGroup {
    // e.g., "Land", "Player"
    string name;
    // e.g., Calc_CEval("::Game::SaveMain"), Calc_CEval("::Game::SavePersonal")
    u32 field_type;
    // fields to get offset and sizes for (map where keys are the field name and the value is a vector of the hashes to follow)
    map<string, vector<u32>> fields;
};

int main(int argc, char **argv)
{
    if (argc != 2) {
        std::cerr << "Usage: offset_extractor <output_header_path>\n";
        return 1;
    }
    fs::path working_directory = fs::current_path();
    const std::string outputHeader = argv[1];
    std::ofstream out(outputHeader);
    if (!out.is_open()) {
        std::cerr << "Failed to open output file: " << outputHeader << "\n";
        return 1;
    }

    out << "#pragma once\n\n";
    out << "// Auto-generated by save_offset_extractor.cpp using the Smmh folder in the RomFs of Animal Crossing: New Horizons\n\n";
    out << "#include <savefile/revision_checker.hpp>\n\n";
    out << "#include <types.hpp>\n\n";
    out << "namespace Smmh {\n\n";

    static const std::vector<MetaGroup> metaGroups = {
        {
            "Land",
            Calc_CEval("::Game::SaveMain"),
            {
                {"Land", {Calc_CEval("Land")}},
                {"NpcVillager", {Calc_CEval("Land"), Calc_CEval("Npc"), Calc_CEval("NpcVillager")}},
                {"PlayerVillagerAccountTable", {Calc_CEval("Land"), Calc_CEval("PlayerVillagerAccountTable")}},
                {"Weather", {Calc_CEval("Land"), Calc_CEval("Weather")}},
                {"LandTime", {Calc_CEval("Land"), Calc_CEval("LandTime")}},
                {"LandId", {Calc_CEval("Land"), Calc_CEval("LandId")}},
                {"TownName", {Calc_CEval("Land"), Calc_CEval("LandId"), Calc_CEval("Name"), Calc_CEval("TownName")}},
                {"LandMyDesign", {Calc_CEval("Land"), Calc_CEval("LandMyDesign")}},
                {"EventFlag", {Calc_CEval("Land"), Calc_CEval("EventFlag")}},
                {"MainField", {Calc_CEval("Land"), Calc_CEval("MainField")}},
                {"PlayerHouseList", {Calc_CEval("Land"), Calc_CEval("PlayerHouseList")}},
                {"HouseList", {Calc_CEval("Land"), Calc_CEval("PlayerHouseList"), Calc_CEval("HouseList")}},
                {"NpcHouseList", {Calc_CEval("Land"), Calc_CEval("NpcHouseList")}},
                {"Shop", {Calc_CEval("Land"), Calc_CEval("Shop")}},
                {"Museum", {Calc_CEval("Land"), Calc_CEval("Museum")}},
                {"VisitorNpc", {Calc_CEval("Land"), Calc_CEval("VisitorNpc")}},
                {"SnowManFamily", {Calc_CEval("Land"), Calc_CEval("SnowManFamily")}},
                {"Fg", {Calc_CEval("Land"), Calc_CEval("Fg")}},
                {"ItemMarketingRoute", {Calc_CEval("Land"), Calc_CEval("ItemMarketingRoute")}},
                {"VillageMelody", {Calc_CEval("Land"), Calc_CEval("VillageMelody")}},
                {"Office", {Calc_CEval("Land"), Calc_CEval("Office")}},
                {"BulletinBoard", {Calc_CEval("Land"), Calc_CEval("BulletinBoard")}},
                {"RegionLanguage", {Calc_CEval("Land"), Calc_CEval("RegionLanguage")}},
                {"CalendarEventRegion", {Calc_CEval("Land"), Calc_CEval("CalendarEventRegion")}},
                {"CampSite", {Calc_CEval("Land"), Calc_CEval("CampSite")}},
                {"NpcCamp", {Calc_CEval("Land"), Calc_CEval("NpcCamp")}},
                {"AirportThemeColor", {Calc_CEval("Land"), Calc_CEval("AirportThemeColor")}},
                {"RumorFavorite", {Calc_CEval("Land"), Calc_CEval("RumorFavorite")}},
                {"PublicWorksLoan", {Calc_CEval("Land"), Calc_CEval("PublicWorksLoan")}},
                {"PublicWorksName", {Calc_CEval("Land"), Calc_CEval("PublicWorksName")}},
                {"VillageScore", {Calc_CEval("Land"), Calc_CEval("VillageScore")}},
                {"NetLandProfile", {Calc_CEval("Land"), Calc_CEval("NetLandProfile")}},
                {"SettlerQuest", {Calc_CEval("Land"), Calc_CEval("SettlerQuest")}},
            }
        },
        {
            "Player",
            Calc_CEval("::Game::SavePersonal"),
            {
                {"Player", {Calc_CEval("Player")}},
                {"_d35a9251", {Calc_CEval("Player"), 3545928273 /*_d35a9251*/ /*Code : u32*/}},
                {"_18fdb93f", {Calc_CEval("Player"), 419281215 /*_18fdb93f*/ /*s8*/}},
                {"LookPack", {Calc_CEval("Player"), Calc_CEval("LookPack")}},
                {"PlayerId", {Calc_CEval("Player"), Calc_CEval("PlayerId")}},
                {"EventFlag", {Calc_CEval("Player"), Calc_CEval("EventFlag")}},
                {"LifeSupport", {Calc_CEval("Player"), Calc_CEval("LifeSupport")}},
                {"BirthDay", {Calc_CEval("Player"), Calc_CEval("BirthDay")}},
                {"PastDaysFromMade", {Calc_CEval("Player"), Calc_CEval("PastDaysFromMade")}},
                {"ProfileMain", {Calc_CEval("Player"), Calc_CEval("ProfileMain")}},
                {"PlayerProfileReportInfo", {Calc_CEval("Player"), Calc_CEval("ProfileMain"), Calc_CEval("PlayerProfileReportInfo")}},
                {"SpecialityFruit", {Calc_CEval("Player"), Calc_CEval("ProfileMain"), Calc_CEval("SpecialityFruit")}},
                {"_5d1fcb04", {Calc_CEval("Player"), 1562364676 /*_5d1fcb04*/ /*u8*/}},
                {"LastPlayDate", {Calc_CEval("Player"), Calc_CEval("LastPlayDate")}},
                {"LastBirthdayYear", {Calc_CEval("Player"), Calc_CEval("LastBirthdayYear")}},
                {"BirthdayLiveDate", {Calc_CEval("Player"), Calc_CEval("BirthdayLiveDate")}},
                {"BirthdayLiveMsgList", {Calc_CEval("Player"), Calc_CEval("BirthdayLiveMsgList")}},
                {"GalleryLandId", {Calc_CEval("Player"), Calc_CEval("GalleryLandId")}},
                {"NetProfile", {Calc_CEval("Player"), Calc_CEval("NetProfile")}},
            }
        },
        {
            "PlayerOther",
            Calc_CEval("::Game::SavePersonal"),
            {
                {"ItemCollectBit", {Calc_CEval("PlayerOther"), Calc_CEval("ItemCollectBit")}},
                {"RecipeCollectBit", {Calc_CEval("PlayerOther"), Calc_CEval("CraftingRecipeCollect"), Calc_CEval("RecipeCollectBit")}},
                {"StorageSize", {Calc_CEval("PlayerOther"), Calc_CEval("ItemChest"), Calc_CEval("ItemHolder"), 1281327397 /*_4c5f8125*/}},
                {"Pocket1Size", {Calc_CEval("PlayerOther"), Calc_CEval("ItemBaggage"), Calc_CEval("ItemBag"), Calc_CEval("ItemHolder"), 1281327397 /*_4c5f8125*/}},
                {"ExpandBaggage", {Calc_CEval("PlayerOther"), Calc_CEval("ItemBaggage"), Calc_CEval("ExpandBaggage")}},
            }
        }
    };

    out << "struct OffsetSize {\n";
    out << "    u64 offset;\n";
    out << "    u64 size;\n";
    out << "};\n\n";

    for (const MetaGroup& group : metaGroups)
    {
        out << "\nnamespace " << group.name << " {\n";

        out << "struct VersionedOffsets {\n";
        out << "    revision_checker::file_header_info revision_info;\n";
        for (const auto& [field_name, field_hashes]: group.fields)
        {
            out << "    OffsetSize " << field_name << ";\n";
        }
        out << "};\n\n";

        out << "constexpr VersionedOffsets AllVersions[] = {\n";

        revision_checker::file_header_info last_revision;
        last_revision.major = 0;
        last_revision.minor = 0;
        for (const revision_checker::file_header_info& revision : revision_checker::revision_info)
        {
            if (last_revision.major != revision.major && last_revision.minor != revision.minor)
            {
                ACNHByaml *byaml = get_byaml(working_directory, revision);
                out << "    {\n";
                out << "        .revision_info = { 0x" << std::hex << revision.major << ", 0x" << revision.minor << ", 0x"
                    << revision.unk1 << ", 0x" << revision.header_revision << ", "
                    << revision.unk2 << ", 0x" << revision.save_revision << " },\n";
                for (const auto& [field_name, field_hashes]: group.fields)
                {
                    out << "        ." << field_name << " = { " << std::hex
                        << "0x" << byaml->CalcOffsets(group.field_type, field_hashes) << ", "
                        << "0x" << byaml->GetSize(group.field_type, field_hashes) << " },\n";
                }
                out << "    },\n";
            }
            else
            {
                continue;
            }
            last_revision = revision;
        }
        // AllVersions end
        out << "};\n";
        out << "} // " << group.name << "\n";
    }

    out << "constexpr u64 get_all_versions_index(revision_checker::file_header_info fhi) {\n";
    out << "    for (u64 i = 0; i < sizeof(Land::AllVersions) / sizeof(Land::AllVersions[0]); ++i) {\n";
    out << "        if (Land::AllVersions[i].revision_info.major == fhi.major &&\n";
    out << "            Land::AllVersions[i].revision_info.minor == fhi.minor) {\n";
    out << "            return i;\n";
    out << "        }\n";
    out << "    }\n";
    out << "    return 0x0;\n";
    out << "}\n";

    out << "} // Smmh\n";
}
